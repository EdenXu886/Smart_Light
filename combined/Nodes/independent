#include <Wire.h>
#include "SparkFun_VEML6030_Ambient_Light_Sensor.h"

#define LED_PIN 15
#define SDA 21
#define SCL 22

#define GAIN 0.125
#define INTEGRATION_TIME 100
#define LUX_CHANGE_THRESHOLD 100
#define MAX_LUX 1500.0
#define GAMMA_VAL 2.2

#define AL_ADDR 0x10  // VEML6030 I2C address

SparkFun_Ambient_Light light(AL_ADDR);

long last_lux_val = -1;

bool lux_above_threshold(long lux_val) {
  return last_lux_val >= 0 && abs(lux_val - last_lux_val) < LUX_CHANGE_THRESHOLD;
}

uint8_t cal_brightness(long lux_val) {
  lux_val = constrain(lux_val, 0L, (long)MAX_LUX);

  if (lux_above_threshold(lux_val)) {
    lux_val = last_lux_val;
  }

  const long BOOST_LUX = 100;
  if (lux_val <= BOOST_LUX) {
    last_lux_val = lux_val;
    return 255;
  }

  float norm = float(lux_val - BOOST_LUX) / float(MAX_LUX - BOOST_LUX);
  norm = constrain(norm, 0.0, 1.0);

  float log_val = log10(norm * 9.0 + 1.0);
  float gamma_corrected = pow(log_val, 1.0 / GAMMA_VAL);

  int pwm = int(constrain(gamma_corrected * 255.0 + 0.5, 0, 255));
  uint8_t pwm_inverted = 255 - pwm;

  last_lux_val = lux_val;
  return pwm_inverted;
}

void setup() {
  Serial.begin(115200);

  Wire.begin(SDA, SCL);
  if (light.begin()) {
    Serial.println("LDR connected successfully");
  } else {
    Serial.println("Could not communicate with the sensor!");
    return;
  }

  light.setGain(GAIN);
  light.setIntegTime(INTEGRATION_TIME);

  ledcSetup(0, 5000, 8);
  ledcAttachPin(LED_PIN, 0);
}

void loop() {
  long lux_val = light.readLight();
  Serial.printf("Lux: %ld\n", lux_val);

  uint8_t brightness = cal_brightness(lux_val);
  Serial.printf("Brightness: %d\n", brightness);

  ledcWrite(0, brightness);
  delay(100);
}
